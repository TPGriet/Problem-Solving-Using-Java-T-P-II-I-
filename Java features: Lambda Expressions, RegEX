1. Multiply Strings:
---------------------------
Write a java method to Multiply Strings based on the following Information:

Input Format: Students need not enter any input, as its already given in the server.

Students need to implement the class and the "Met" Method.


The "Met" method accepts 2 parameters: one is StringBuilder based value and second integer k.

You need to multiply the string k times and return the StringBuilder value.

Test Case Example:
-------------------
case=t1
input=GRIET
3
output=
Result after Multiplying 3 times:
GRIET GRIET GRIET 

case=t2
input=GRIET
0
output=
String is empty

case=t3
input=ARSENAL
4
output=
Result after Multiplying 4 times:
ARSENAL ARSENAL ARSENAL ARSENAL 

case=t4
fail message="hidden case"
input=griet training
3
output=
Result after Multiplying 3 times:
griet training griet training griet training 

case=t5
fail message="hidden case"
input=College
0
output=
String is empty

PROGRAM:
----------------------------


1. Automorphic Number
-----------------------------
Given a number N, the task is to check whether the number is an Automorphic number or not. 
A number is called an Automorphic number if and only if its square ends in the same digits as the number itself.
For example: 25 is an Automorphic Number bcz 25*25 =625. Since it ends with 25.              

Input/Output Constraints:
----------------------------
1<=N<=10^18


Test Case Examples:
-------------------
case=t1
input=25
output=Automorphic number.

case=t2
input=76
output=Automorphic number.

case=t3
input=376
output=Automorphic number.

case=t4
input=890625
output=Automorphic number.

case=t5
input=75
output=not automorphic number.

case=t6
fail message="hidden case"
input=7109376
output=Automorphic number.

case=t7
fail message="hidden case"
input=6
output=Automorphic number.

PROGRAM:
------------------------------------------

2. Palindrome Checking using Lambda
--------------------------------------------
Write a Java program to implement a lambda expression to check if a given string is a palindrome.

Test Case Example:
----------------------
case=t1
input=madam
output=
madam is a palindrome? true

case=t2
input=ar77ra
output=
ar77ra is a palindrome? true

case=t3
fail message="hidden test case"
Grade reduction=20%
input=1254
output=
1254 is a palindrome? false

case=t4
fail message="hidden test case"
input=5yigm45
output=5yigm45 is a palindrome? false

PROGRAM:
---------------------------
import java.util.Scanner;
import java.util.function.Predicate;

/*@FunctionalInterface
public interface Predicate<T> {
boolean test(T t);
}*/

public class Solution {
  public static void main(String[] args) {
    Predicate < String > palindrome = i -> {
      String rev = new StringBuilder(i).reverse().toString();
      return i.equals(rev);
    };
    Scanner sc =new Scanner(System.in);
    String str = sc.nextLine();
  
    boolean res = palindrome.test(str);
    System.out.println(str+ " is a palindrome? " + res);


  }
}



3. Largest & Smallest String in ArrayList
-------------------------------------------------
Write a Java program to implement a lambda expression to find the length of the longest and smallest string in a list.
Test Case Example:
----------------------
/*
/*Find the length of the longest and shortest strings in a given arraylist.
Implement the logic using lambda expression.
explore the stream class of java 8 before solving.

Input Format: Read '5' string names from the user one by one.


Test Case Example:
----------------------
case=t1
input= Virat Kohli
Jasprit Bumrah
K L Rahul
Venkatesh Prasad
Ishan Kishan
output=
Length of the longest string: 16
Length of the smallest string: 9

case=t2
input=0
134
griet
college
T&P
output=
Length of the longest string: 7
Length of the smallest string: 1

case=t3
fail message="Hidden test case"
grade reduction=20%
input=3456
4544
&(*&*
dkngn
cse
output=
Length of the longest string: 5
Length of the smallest string: 3

PROGRAM:
------------------------------
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;                                   //stream processes sequence of data.

public class Solution {
    public static void main(String[] args) {
        List<String> names = new ArrayList<>();
        Scanner sc=new Scanner(System.in);
      
       for (int i = 0; i < 5; i++) {
            String input = sc.nextLine();
            names.add(input);
        }
        
        int maxLen = names.stream().mapToInt(s -> s.length()).max().orElse(0);

        int minLen = names.stream()
                .mapToInt(s -> s.length())
                .min()
                .orElse(0);

        System.out.println("Length of the longest string: " + maxLen);
        System.out.println("Length of the smallest string: " + minLen);
    }
}

4. Separate consonants and vowels from a given string:
------------------------------------------------------------
Write a Java program to separate consonants and vowels from a given string. ignore the case.

Note: if the string contains numbers print the following error message:

"The String should not contain numbers"

Test Case Example:
----------------------
case=t1
fail message="hidden case"
input= arunkumarKongi
output=
Vowels: auuaoi
Consonants: rnkmrKng

case=t2
grade reduction=10%
input=ARUNKUMAR1661
output=
The String should not contain numbers

case=t3
fail message="hidden case"
input=GRIET COLLEGE
output=
Vowels: IEOEE
Consonants: GRT CLLG

case=t4
fail message="hidden case"
input=This is Java regular expression
output=
Vowels: iiaaeuaeeio
Consonants: Ths s Jv rglr xprssn

PROGRAM:
--------------------------------
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String input = sc.nextLine();
        sc.close();

        if (Checkfornumbers(input)) {
            System.out.println("The String should not contain numbers");
        } else {
            String vowels = input.replaceAll("(?i)[^aeiou]", "");
            String constants = input.replaceAll("(?i)[aeiou]", "");

            System.out.println("Vowels: " + vowels);
            System.out.println("Consonants: " + constants);
        }
    }

    private static boolean Checkfornumbers(String input) {
        return input.matches(".*\\d+.*");                             // .*:   .indicates any char, * indicates zero or more characters 
    }                                                                                   //\\d+ any digit  + indicates one or more occurences.
}


/*input.matches(".*[^*&%$#@0-9].*");*/  //if input contains *&%$#@ or numbers raise error



6. Sorting Cricketer Objects:
------------------------------------------
Implement a class named as Cricketers with the constructor parameters (name,age and rank)
   Initilize getter and setter methods for the said class.
   
   Then sort the cricketers data based on any of the parameters name,age or rank.
   if user enters any other parameter apart from above 3, print "invalid sort value."

Input format: read the parameter value from the user (i,e name, age or rank)

Hint: use the existing player details given in the program!!
      sorting should be case insenstive.
      use inbuilt sort function along with lambda expression for getting the desired result.
     
      
Test Case Example:
----------------------
case=t1
input=name
output=
name= K L Rahul, age=30, rank=8
name= Rohit Sharma, age=33, rank=4
name= sky, age=27, rank=9
name= Virat Kohli, age=34, rank=6

case=t2
input=rank
output=
name= Rohit Sharma, age=33, rank=4
name= Virat Kohli, age=34, rank=6
name= K L Rahul, age=30, rank=8
name= sky, age=27, rank=9

case=t3
fail message="hidden test case"
grade reduction=10%
fail message="hidden test case"
input=age
output=
name=sky, age=27, rank=9
name=K L Rahul, age=30, rank=8
name=Rohit Sharma, age=33, rank=4
name=Virat Kohli, age=34, rank=6

case=t4
fail message="hidden test case"
input=id
output=
invalid sort value

PROGRAM:
----------------------------

import java.util.*;

public class Solution {
    public static void main(String[] args) {
        List<cricketers> players = new ArrayList<>();
        players.add(new cricketers("Virat Kohli", 34, 6));
        players.add(new cricketers("Rohit Sharma",33, 4));
        players.add(new cricketers("K L Rahul", 30, 8));
        players.add(new cricketers("sky", 27, 9));
        /*Person s1=new Person("sky",27,45);
        players.add(s1);*/

        Scanner s= new Scanner(System.in);
        String str=s.next().trim();
        Sortbyvalue(players, str);

        for (cricketers p : players) {
            System.out.println(p);
        }
    }
    public static class cricketers {
        private String name;
        private int age;
        private int rank;

        public cricketers(String name, int age, int rank) {
            this.name = name;
            this.age = age;
            this.rank = rank;
        }

        public String getName() {
            return name;
        }

        public int getAge() {
            return age;
        }

        public int getRank() {
            return rank;
        }

        @Override
        public String toString() {
            return "name=" + name + ", age=" + age + ", rank=" + rank;
        }
    }
    public static void Sortbyvalue(List<cricketers> list, String str) {
        switch (str) {
            case "name":
                Collections.sort(list, (p1, p2) -> p1.name.compareToIgnoreCase(p2.getName()));
                break;
            case "age":
                Collections.sort(list, (p1, p2) -> Integer.compare(p1.getAge(), p2.getAge()));
                break;
            case "rank":
                Collections.sort(list, Comparator.comparingInt(cricketers::getRank));
                break;
            default:
                System.out.println("Invalid sort value.");
                System.exit(0);
        }
    }
}
     
7. Character Shifter:
---------------------------------------
Write a Java program to move all lower case letters to the front of a given word. 
This will keep the relative position of all the letters (both upper and lower case) same.

Test Case Example:
----------------------
case-=t1
input=This is JavA
output=
his is avT  JA

case=t2
input=Arsenal FootBall Club                                                           
output=
rsenal ootall lubA FB C  

case=t3
fail message="hidden test case"
grade reduction=10%
fail message="hidden case"
input=this is java
output=
this is java  

case=t4
fail message="hidden test case"
input=JAVA
output=JAVA

PROGRAM:
----------------------------
import java.util.*;
public class Solution {
 
   public static void main(String[] args) {	   
	   Scanner sc=new Scanner(System.in);
	   String text=sc.nextLine().trim();
		System.out.println(validate(text));
	}

   public static String validate(String text) {
        return text.replaceAll("[A-Z]", "") + text.replaceAll("[a-z]", "");
   }
     //   return text.replaceAll("[A-Z]", "") +" "+ text.replaceAll("[a-z]", "");
}

8. Validate a given phone number:
----------------------------------------
Write a Java program to validate a phone number using Regular Expression.

Max length of the phone number is upto 10 digits.

Following are valid phone numbers:
------------------------------------------
“(123)4567890", "1234567890", "123-456-7890", "(123)456-7890", (123)-456-7890

Following are invalid phone numbers:
-------------------------------------
"(1234567890)","123)4567890", "12345678901", "(1)234567890", "(123)-4567890", "1", "12-3456-7890", "123-4567", "Hello world"};

Regex explanation:
------------------------
\\d{10} - to match 10 digit number
\\(\\d{3}\\): to match 3 digit number enclosed with brackets.
(-)? - to check for optional hyphen.
\\d{3}-\\d{4}: to check last 3 digits followed by hyphen and last 4 digits.
\\d{3} : to check phone numbers without paranthesis.
(-)? - to check for optional hyphen.

Use the above regular expression patterns to get the desired output:


Test Case Example:
----------------------
case=t1
input=1234567890
output=
is valid phone number?: true

case=t2
input=123)456789012
output=is valid phone number?: false

case=t3
fail message="hidden test case"
input=9036564454
output=
is valid phone number?: true

case=t4
fail message="hidden test case"
input=903-656-4454
output=
is valid phone number?: true

case=t5
fail message="hidden test case"
input=(903)-656-4454
output=
is valid phone number?: true

case=t6
fail message="hidden test case"
grade reduction=10%
input=(1)234567890
output=
is valid phone number?: false

case=t7
fail message="hidden case"
input=(9036564454)
output=
is valid phone number?: false

case=t8
fail message="hidden test case"
input=hello 1234
output=
is valid phone number?: false

case=t9
fail message="hidden test case"
input=(9)036564454
output=
is valid phone number?: false

case=t10
fail message="hidden case"
input=(123)-4567890
output=
is valid phone number?: false

PROGRAM:
-------------------------------
import java.util.*;
public class Solution {
 
   public static void main(String[] args) {	   
	    Scanner sc=new Scanner(System.in);
	    
	    String text =sc.nextLine();
		System.out.println("is valid phone number?: " +validate(text));
	}
   public static Boolean validate(String text) {
         return text.matches("\\d{10}|\\(\\d{3}\\)(-)?\\d{3}-\\d{4}|\\d{3}(-)?\\d{3}-\\d{4}");
}
}

9. Sanitize the IP Address:
---------------------------------------
Write a Java program to remove leading zeros from a given IP address using reg expression.

input format: enter the ip address as string. and remove all leading zeroes in each octet of ip address.
if ip address is ending with dot(.) remove the dot as well.

Hint: Explore positive lookbehind and negative lookahead assertion concepts in java regular expression.

Test Case Example:
----------------------
case=t1
input=012.101.016.00003.
output=
12.101.16.3

case=t2
input=000.0000.000.0000.
output=
0.0.0.0

case=t3
fail message= "hidden test case"
input=175.010.00000012.2030                                                           
output=
175.10.12.2030  

case=t4
fail message= "hidden test case"
input=12.13.14.50.
output=
12.13.14.50

case=t5
fail message= "hidden test case"
grade reduction=10%
fail message="Hidden case"
input=175.00001.12.203000.
output=
175.1.12.203000

PROGRAM:
---------------------------------
import java.util.*;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String input = sc.nextLine().trim();
        System.out.println(validate(input));
    }

    public static String validate(String ip) {
        String res = ip.replaceAll("(?<=^|\\.)0+(?!\\.|$)", "");

        if (res.endsWith(".")) {
            res= res.substring(0, res.length() - 1);
        }

        return res;
    }
}


10. Country Code Checker:
------------------------------------
Find if a given phone number is valid jio phone number or valid indian phone number or
not using regular expression. 

conditions:
----------------------
Valid indian phone numbers are prefixed with +91 and must include excatly 10 digits after the +91.
Assume: Valid Jio numbers begin with 66 after +91.


Test Case Example:
----------------------
case=t1
input= +917019572678
output= Valid Indian Phone Number

case=t2
input=+817038598342
output= Invalid Phone Number

case=t3
fail message="hidden test case"
input=+91888349016534
output= Invalid Phone Number

case=t4
grade reduction=10%
fail message="hidden test case"
input=+7189375989123
output= Invalid Phone Number

case=t5
fail message="hidden test case"
input= +916657812390
output= Valid Jio Phone Number

case=t6
fail message="hidden test case"
input= +816657812390
output= Invalid Phone Number

case=t7
fail message="hidden test case"
grade reduction=10%
fail message="hidden case"
input= +917019045555
output= Valid Indian Phone Number


PROGRAM:
------------------------------------
import java.util.Scanner;
import java.util.regex.*;

public class Solution{
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String num = sc.nextLine().trim();
        
        IndianNumber(num); 
        
        sc.close(); 
    }

    public static void IndianNumber(String num) {
        String p = "^(\\+91(66)?\\d{8}|\\+91\\d{10})$";
    
        if (Pattern.matches(p, num)) {
            if (num.startsWith("+91")) {
                if (num.startsWith("+9166")) {
                    System.out.println("Valid Jio Phone Number.");
                } else {
                    System.out.println("Valid Indian Phone Number.");
                }
            }
        } else {
            System.out.println("Invalid Phone Number.");
        }
    }
}

