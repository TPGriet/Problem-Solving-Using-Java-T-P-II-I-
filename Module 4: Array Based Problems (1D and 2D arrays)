1. Sum: Between Largest and Second Largest Element:
--------------------------------------------------------
Read as many elements as you want to in an arraylist once done press quit in the next line.
And find the sum of elements between largest and second largest numbers in the given arraylist.

observe all the given test cases before solving.

test case examples:
-------------------------
case=t1
input=5 3 2 1 4
quit
output=
Sum between the largest and second-largest numbers: 6

case=t2
input=4 2 1 3 5
quit
output=
Sum between the largest and second-largest numbers: 6

case=t3
fail message="hidden case"
input=2 1 6 7 8 9 5 4 10
quit
output=
Sum between the largest and second-largest numbers: 9

case=t4
fail message="hidden case"
input=1 4 8 10
quit
output=
Sum between the largest and second-largest numbers: 0

case=t5
fail message="hidden case"
input=10
quit
output=
At least two distinct numbers are required.

case=t6
fail message="hidden case"
input=1 2 3 4 5 6 7
quit
output=
Sum between the largest and second-largest numbers: 0

case=t7
fail message="hidden case"
input=2 2 2 2 2 
quit
output=
Sum between the largest and second-largest numbers: 0

case=t8
fail message="hidden case"
input=2 3 1 2 2 2 2 2 2 4
quit
output=
Sum between the largest and second-largest numbers: 13

PROGRAM:
-------------------------------
import java.util.ArrayList;
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        ArrayList<Integer> numbers = new ArrayList<>();

        while (sc.hasNextInt()) {
            numbers.add(sc.nextInt());
        }
        if (numbers.size() < 2) {
            System.out.println("At least two distinct numbers are required.");
            return;
        }
        int Big = 0;
        int secondBig = -1;

        for (int i = 1; i < numbers.size(); i++) {
            if (numbers.get(i) > numbers.get(Big)) {
                secondBig = Big;
                Big = i;
            } else if (secondBig == -1 || numbers.get(i) > numbers.get(secondBig)) {
                secondBig = i;
            }
        }
        int sum = 0;

        int k=Big<secondBig?Big:secondBig;
     
        for(int i=k+1;i<Big+secondBig-k;i++)
        sum=sum+numbers.get(i);

        System.out.println("Sum between the largest and second-largest numbers: " + sum);
    }
}


2. Harmony in the Array:
--------------------------------
Given an arraylist of size n, Write a function int harmonyIndex(int[] arr, int n) that returns harmony index (if any) or -1
if no such  index exists. 

The harmony index of an array is an index such that the sum of elements at lower indexes is equal to the sum of elements at higher indexes. 

Test Case example:
---------------------
case=t1
input=6
-7 1 5 2 -4 3
output=
Harmony Index: 3

case=t2
input=5
3 2 5 3 2
output=
Harmony Index: 2

case=t3
fail message="hidden case"
input=4
1 2 3 0
output=
Harmony Index: -1

case=t4
fail message="hidden case"
input=8
-1 2 -1 -1 -1 1 4 -1
output=
Harmony Index: 6

case=t5
fail message="hidden case"
input=7
2 1 5 76 8 5 4
output=
Harmony Index: -1

PROGRAM:
-----------------------------
import java.util.ArrayList;
import java.util.Scanner;

class Solution {
   public static int harmonyindex(ArrayList<Integer> arr, int n) {
        int totalSum = 0;
        int leftSum = 0;

        for (int i = 0; i < n; i++) 
            totalSum += arr.get(i);

        for (int i = 0; i < n; i++) {
            totalSum -= arr.get(i);

            if (leftSum == totalSum)
                return i;

            leftSum += arr.get(i);
        }

        return -1;
    }

    // Driver code
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

      //  System.out.println("Enter the number of elements in the array:");
        int n = scanner.nextInt();

        //System.out.println("Enter the elements of the array:");
        ArrayList<Integer> arr = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            arr.add(scanner.nextInt());
        }
        int result = harmonyindex(arr, n);
        System.out.println("Harmony Index: " + result);

        scanner.close();
    }
}


3. Diagonal Sum Matrix:
---------------------------------------
Write a java program to find the sum of diagonal elements in a square matrix.

Note: if the matrix is an Odd size matrix for example 3x3 Matrix, then don't add center element twice.
     For example if the matrix is: 
     1 2 3
     4 5 6
     7 8 9    
     SUm of diagonal elements is 25 (1+5+9+3+7)

Input/Output Constraints:
----------------------------
Within Integer Range.


Test Case Examples:
-------------------
input=3 
1 2 3
4 5 6
7 8 9
output=
Sum of Diagonals: 25

input=4
1 2 3 4
5 6 7 8
2 2 2 2 
7 7 7 7
output=
Sum of Diagonals: 36

PROGRAM:
--------------------------------------


4. Kth Smallest Element in a 2D array
--------------------------------------
Write a java program to find Kth Smallest element in a 2D array.

Input Format: enter the number of rows and columns on each line
              Then enter the 2D array elements
              At last, Enter the K, which indicates the kth Smallest element to be searched.
              

Input/Output Constraints:
----------------------------
Within Integer Range.

Test Case Examples:
-------------------
case=t1
input=
4
3
 7   4   8
 3   5   89
12  56   10
14  45   100
4
output=
The 4th smallest element is: 7

case=t2
input=
2
3
7 6 8
6 8 10
3
output=
The 3th smallest element is: 7

case=t3
input=
3
4 
1 2 3 4
5 6 7 8 
9 1 2 3
6
output=
The 6th smallest element is: 3

case=t4
input=
4
3
2423434 545 675445
3455423 455 12344
6786532 123 67865
9009846 859 89884
7
output=
The 7th smallest element is: 89884

case=t5
fail message="hidden case"
input=4
2
1 2
3 4
5 6
7 8
4
output=
The 4th smallest element is: 4

PROGRAM:
-----------------------------------
import java.util.Arrays;
import java.util.PriorityQueue;
import java.util.Scanner;
public class kthsmallest {

        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);

            // Read input from the user
          //  System.out.print("Enter the number of rows: ");
            int rows = scanner.nextInt();

            //System.out.print("Enter the number of columns: ");
            int cols = scanner.nextInt();

            int[][] matrix = new int[rows][cols];

           // System.out.println("Enter the elements of the 2D array:");

            for (int i = 0; i < rows; i++) {
                for (int j = 0; j < cols; j++) {
                    matrix[i][j] = scanner.nextInt();
                }
            }

            //System.out.print("Enter the value of k: ");
            int k = scanner.nextInt();

            int kthSmallest = findKthSmallest(matrix, k);
            System.out.println("The " + k + "th smallest element is: " + kthSmallest);
        }

        private static int findKthSmallest(int[][] matrix, int k) {
            int rows = matrix.length;
            int cols = matrix[0].length;

            int[] flatArray = new int[rows * cols];
            int index = 0;

            for (int i = 0; i < rows; i++) {
                for (int j = 0; j < cols; j++) {
                    flatArray[index++] = matrix[i][j];
                }
            }

            Arrays.sort(flatArray);

            return flatArray[k - 1];
        }
    }



// basic approach

// import java.util.Scanner;
// import java.util.Arrays;
// public class KthSmallestElement2D {
//     public static void main(String[] args) {
//         Scanner sc = new Scanner(System.in);
        
//         System.out.println("Enter the number of rows:");
//         int rows = sc.nextInt();
        
//         System.out.println("Enter the number of columns:");
//         int columns = sc.nextInt();
        
//         int[][] array = new int[rows][columns];
//         System.out.println("Enter the elements of the 2D array:");
//         for (int i = 0; i < rows; i++) {
//             for (int j = 0; j < columns; j++) {
//                 array[i][j] = sc.nextInt();
//             }
//         }
        
//         System.out.println("Enter the value of k:");
//         int k = sc.nextInt();

//         int[] flatArray = new int[rows * columns];
//         int index = 0;
        
//         for (int i = 0; i < rows; i++) {
//             for (int j = 0; j < columns; j++) {
//                 flatArray[index++] = array[i][j];
//             }
//         }
//         System.out.println(Arrays.toString(flatArray));
        
//         for (int i = 0; i < flatArray.length; i++) {
//             int count = 0;
//             for (int j = 0; j < flatArray.length; j++) {
//                 if (flatArray[j] < flatArray[i]) {
//                     count++;
//                 }
//             }
//             if (count == k - 1) {
//                 System.out.println("The " + k + "th smallest element is: " + flatArray[i]);
//                 break;
//             }
//         }
//     }
// }

// Enter the value of k:
// 3
// [3, 4, 66, 34, 5, 7, 8, 77, 22]
// The 3th smallest element is: 5

5. Unique Pairs in 2D Array of Strings:
-----------------------------------------
Given a 2D array of strings, with each row containing a name pair,
you have to print the number of unique name pairs up till that point.

Test case example:
-----------------------
case=t1
input=4
arun ck
virat kohi
arun ck
rohit sharma
output=
1
2
2
3

case=t2
input=5
a b
c d
e f
g h
i j
output=
1
2
3
4
5

case=t3
fail message="hidden case"
input=5
virat kohli
rohit sharma
ishan kishan
virat kohli
KL rahul
output=
1
2
3
3
4

case=t4
fail message="hidden case"
input=4
v k
a k
v k
a k
output=
1
2
2
2

Explaination: for 1st row unique string is 1, 2nd row its updated to 2, third row its still 2 as the,
string arun ck is already repeated and so on.

PROGRAM:
---------------------------------
import java.util.*;
public class Solution {
    public static void main(String[]args){
      Scanner scanner = new Scanner(System.in);
 
     
        int n = scanner.nextInt();
        scanner.nextLine(); 

        String[][] input = new String[n][2];

       // System.out.println("Enter the pairs (space-separated values):");
        for (int i = 0; i < n; i++) {
            String line = scanner.nextLine();
            input[i] = line.split(" ");
        }
      
        uniquePairs(input);
        scanner.close();   
    }
    
public static void uniquePairs(String[][] pairs) {
        HashSet<String> set = new HashSet<>();
        int count = 0;

        for (String[] i : pairs) {
            String merged = i[0] + " " + i[1];

            if (set.contains(merged)) {
                System.out.println(count);
            } else {
                set.add(merged);
                count++;
                System.out.println(count);
            }
        }
    }
}

6. Winning Candidate: Boyer Moore Voting Algorithm:
---------------------------------------------
Given an array A of N elements. Find the Winning Candidate element in the array.
A WinningCandidate element in an array A of size N is an element that appears strictly more than N/2 times in the array.

Test Case example:
---------------------
case=t1
input=5
3 1 3 3 2
output=
Winning Candidate: 3

case=t2
input=5
1 2 2 2 1
output=
Winning Candidate: 2

case=t3
fail message="hidden case"
input=6
4 4 4 3 3 3
output=
No Such Candidate

case=t4
fail message="hidden case"
input=4
1 2 3 4
output=
No Such Candidate

case=t5
fail message="hidden case"
input=7
5 5 5 5 7 7 7
output=
Winning Candidate: 5


if winning candidate is not present print the following: 
No such candidate 

PROGRAM:
--------------
import java.util.ArrayList;
import java.util.Scanner;
class Solution {
    static int winningCandidate(ArrayList<Integer> list) {
        int count = 0;                         //ex: 1 2 3 2 2
        int candidate = -1;
        for (int num : list) {
            if (count == 0) {
                candidate = num;
            }
            if(num==candidate)
            {
                count++;
            }
            else count--;
        }
        int finalCount = 0;
        for (int num : list) {
            if (num == candidate) {
                finalCount++;
            }
        }
        if (finalCount > list.size() / 2) {
            return candidate;
        }

        return -1;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        //System.out.print("Enter the size of the ArrayList: ");
        int size = sc.nextInt();
        ArrayList<Integer> list = new ArrayList<>();
        //System.out.println("Enter elements for the ArrayList:");
        for (int i = 0; i < size; i++) {
            list.add(sc.nextInt());
        }
        int res = winningCandidate(list);
        if (res != -1) {
            System.out.println("Winning Candidate: " + res);
        } else {
            System.out.println("No Such Candidate");
        }
        sc.close();
    }
}



7. Longest Consecutive Subsequence:
--------------------------------------
Write a java program to find the length of the Longest Consecutive Subseqeuence from the given array.
Note: if the Array contains duplicate elements, ignore them.
              

Input/Output Constraints:
----------------------------
Input length: Enter the elements into array as long as the user enters "quit"
Output: Length of subsequence as Integer output.


Test Case Examples:
-------------------
case=t1
input=3 1 3 3 6 7 2 2 8 4 4 10 50 100
quit
output=
Length of the longest consecutive subsequence: 4

case=t2
input=7 5 6 10 2 12 4 4 100 
quit
output=
Length of the longest consecutive subsequence: 4

case=t3
fail message="hidden case"
input=1 2 3 4 5 6 6 6 6 4 4 4 
quit
output=
Length of the longest consecutive subsequence: 6

case=t4
input=1 1 1 1 1 1 1 1
quit
output=
Length of the longest consecutive subsequence: 1

case=t5
input=
100 3 7 7 3 3 3 10 4 4 4 12 56 2 2 2 2 2  
quit
output=
Length of the longest consecutive subsequence: 3

case=t6
fail message="hidden case"
input=1 2 2 2 2 2 56 56 56 34 3 33 
quit
output=
Length of the longest consecutive subsequence: 3

case=t7
input=quit
output=
Length of the longest consecutive subsequence: 0

case=t8
fail message="hidden case"
input=griet
output=
Length of the longest consecutive subsequence: 0

case=t9
fail message="hidden case"
input=100
quit
output=
Length of the longest consecutive subsequence: 1

case=t10
input=1 2 3 4 5 6 7 8 9 9 10 11 12 13 13 14 15 16 17 18 19 20                         
quit                                                                            
output=
Length of the longest consecutive subsequence: 20    

PROGRAM:
-----------------------------
import java.util.*;

public class Subsequence {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Set<Integer> numberSet = new HashSet<>();

        // System.out.println("Enter the elements into the array (press 'quit' to finish):");
        
        // while (scanner.hasNext()) {
        //     if (scanner.hasNextInt()) {
        //         numberSet.add(scanner.nextInt());
        //     } else {
        //         String input = scanner.next();
        //         if (input.equalsIgnoreCase("quit")) {
        //             break;
        //         }
        //     }
        // }
        
        while(scanner.hasNextInt())
        {
            numberSet.add(scanner.nextInt());
        }

        int longestLength = Subsequence(numberSet);
        System.out.println("Length of the longest consecutive subsequence: " + longestLength);

        scanner.close();
    }

    private static int Subsequence(Set<Integer> numberSet) {
        int longestStreak = 0;
        System.out.println(numberSet);
        for (int num : numberSet) {
            if (!numberSet.contains(num - 1))
            {
                int currentNum = num;
                int currentStreak = 1;

                // Count the length of the sequence
                while (numberSet.contains(currentNum + 1)) {
                    currentNum++;
                    currentStreak++;
                }

                longestStreak = Math.max(longestStreak, currentStreak);
            }
        }

        return longestStreak;
    }
}


8. Addition of two Matrices (need to submit in Python):
-----------------------------------------------------
'''Given 2 matrices of same dimensions, you have to print the sum of the 2 matrices.
Complete the given method ADD which takes two parameters as Matrix A and Matrix B'''

TEST CASES:
-------------------
case=t1
input=3 2
1 2 
3 4 
5 6
7 8 
9 10
11 12
output=
Matrix A :
1 2 
3 4 
5 6
Matrix B :
7 8
9 10
11 12
Resultant Matrix is:
8 10 
12 14 
16 18


case=t2
input=3 3
1 0 1
1 1 0
0 0 1
1 0 0 
0 0 0
0 1 1
output=
Matrix A :
1 0 1
1 1 0
0 0 1
Matrix B :
1 0 0 
0 0 0
0 1 1
Resultant Matrix is:
2 0 1
1 1 0
0 1 2


case=t3
fail message="hidden case"
input=2 2
1 2
3 4
5 6
7 8
output=
Matrix A :
1 2 
3 4 
Matrix B :
5 6 
7 8 
Resultant Matrix is:
6 8 
10 12 

PROGRAM:
------------------------------
def Add(A, B):
    result = []
    for i in range(len(A)):
        row = []
        for j in range(len(A[0])):
            row.append(A[i][j] + B[i][j])
        result.append(row)
    
    print("Resultant Matrix is:")
    for row in result:
        print(row)
        
R,C = map(int, input().split())
A = []
B=[]

for i in range(R):          # Reading Matrix A row entries
    l1=list(map(int,input().split()))
    A.append(l1)
    
for i in range(R):          # Reading Matrix B row entries
    l1=list(map(int,input().split()))
    B.append(l1)



print("Matrix A:")
for row in A:
    print(row)
print("Matrix B:")
for row in B:
    print(row)
     
    
Add(A,B)             
    
9. is Multiplication Possible? (need to submit in Python)
--------------------------------------------------
'''	In mathematics, two matrices can only be multiplied if the number of columns in the first matrix is
the same as the number of rows in the second matrix.
Given 2 matrices stored in 2 different 2D lists, 
you have to tell whether multiplication between them is possible or Impossible.

Complete the given method solve which takes as parameter 2 matrices A and B.


Input Format: Read the number of Rows only in Matrix A and B on same line separated by space.

Output Format: Possible or Impossible


test case example 1:
---------------------
Input:
2 2         (#Number of rows in Matrix A and B is 2)
65 87 56    (#Matrix A elements)
78 13 89
34 12       (#Matrix B Elements)
78 14
Output=
Impossible

Explaination: Since number of Cols in Matrix A is 3 and Number of cols in Matrix
              B is 2, They are not same, Hence Multiplication is not Possible.


Test case Example 2:
----------------------
case=t1
input=2 2         
65 87 56    
78 13 89
34 12       
78 14
Output=
Impossible

case=t2
fail message="Hidden"
Input=3 3
12 45 32
10 78 33
89 23 49
23 86
34 62
18 14
Output=
Possible

case=t3
input=2 3
1 2
3 4
4 5 6
1 2 3
7 8 9
output=
Impossible

case=t4
fail message="Hidden"
input=2 3
1 2 3 4
4 5 6 7
1 2
3 4
5 6
output=
Impossible

case=t5
input=2 3
1 2 3
4 5 6
2 3
5 4
7 6
output=
Possible

'''

PROGRAM:
----------------------
def solve(A, B):
    if len(A[0]) == B:
        print("Possible")
    else:
        print("Impossible")

R1,R2 = map(int,input().split())

A = []
B = []

for i in range(R1):          # Reading Matrix A row entries
    l1 = list(map(int, input().split()))
    A.append(l1)
    
for i in range(R2):          # Reading Matrix B row entries
    l1 = list(map(int, input().split()))
    B.append(l1)

solve(A, R2)

10. Multiplication of 2 Matrices (need to submit in python)
------------------------------------------------------------
'''	Complete the Matrix Multiplication function given in the existing code snippet.
    ensuring that the number of columns in the first matrix matches the number of rows in the second matrix
    for the multiplication to be possible. If not equal then print "Multiplication not possible" message
   
Note: The function should check if the number of cols in 1st matrix is same as no of rows in 2nd matrix,
        perform the multiplication and then return the resultant matrix to the caller function.

Input Format: Enter the dimensions of the first matrix in line 1 separated by space.
              Enter the dimensions of the second matrix in line 2 separated by space.
              
(As the input code snippet is already given, no need to write the code for input reading)

Output Format: 
Multiplication of both matrices printed in list format.



test case example 1:
---------------------
input=
2 2
2 3

2 3
7 6

2 3 2
5 21 1

output=
Resultant Matrix:
[19, 69, 7]
[44, 147,20]

Explaination: Since number of Cols in Matrix A is 2 and Number of cols in Matrix
              B is 2, They are same, Hence Multiplication is Possible.


Test case Example 2:
----------------------
case=t1
Input=3 2
2 3
1 4 
4 5
8 3
1 2 3
4 5 6
output=
Resultant Matrix:
[17, 22, 27]
[24, 33, 42]
[20, 31, 42]

case=t2
input=2 2
2 3
2 3
7 6
2 3 2
5 21 1
output=
Resultant Matrix:
[19, 69, 7]
[44, 147,20]

case=t3
input=3 4
2 3
1 2 3 4
5 6 7 8
1 3 5 4
7 6 4
3 2 1
output=Multiplication not possible

case=t4
fail message="hidden"
input=2 2
3 2
1 2
3 4
1 2 3
4 5 6
7 8 9
output=Multiplication not possible

case=t5
fail message="Hidden"
input=2 2
2 1
10 23
12 23
10
12
output=
[376]
[396]
'''

PROGRAM:
--------------------------------
def multiplication(A, B):
    #Complete this function 
    #if len(A[0]) != len(B):
    if C1 != R2:
        print("Multiplication not Possible")
        return None
    else:
        result = [[0 for _ in range(len(B[0]))] for _ in range(len(A))]
    
    for i in range(len(A)):
        for j in range(len(B[0])):
            for k in range(len(B)):
                result[i][j] += A[i][k] * B[k][j]
                
    return result


R1, C1 = map(int, input().split())
R2, C2 = map(int, input().split())


A = [list(map(int, input().split()[:C1])) for _ in range(R1)]
B = [list(map(int, input().split()[:C2])) for _ in range(R2)]

result = multiplication(A, B)

if result:
    print("Resultant Matrix:")
    for row in result:
        print(row)
