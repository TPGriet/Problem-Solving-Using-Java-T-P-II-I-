1. BST Operations: Count Nodes, Height, Max Value, Min Value, Level Order Traversal:
------------------------------------------------------------------------------------------
Implement the following operations on Binary Search Tree:

1.Insert  2.NODE COUNT   3. HEIGHT of BST   4.MINIMUM Value   5. MAXIMUM Value   6.Display Level Order    7.Exit

Test case example:
------------------
case=t1
input=1 12
1 45
1 3
18
1 8
1 6
1 9
1 34
2
3
4
5
6
7
output=Invalid Choice!!
Number of nodes in BST is: 7
Height of BST is: 4
Minimum Value in BST is: 3
Maximum Value in BST is: 45
Level Order traversal of BST is:                                                
12->3->45->8->34->6->9->  



case=t2
input=1 2
1 4
1 7
1 45
1 34
1 89
1 23
1 2
2
3
4
5
6
7
output=Number of nodes in BST is: 8
Height of BST is: 6
Minimum Value in BST is: 2
Maximum Value in BST is: 89
Level Order traversal of BST is:
2->2->4->7->45->34->89->23->

case=t3
input=2
3
4
5
1 12
1 3
1 5
1 67
1 100
1 3 
1 7
1 9
1 13
1 72
2
3
4
5
6
7
output=Number of nodes in BST is: 0
Height of BST is: 0
BST is empty. Can not find the value
BST is empty. Can not find the value
Number of nodes in BST is: 10
Height of BST is: 5
Minimum Value in BST is: 3
Maximum Value in BST is: 100
Level Order traversal of BST is:
12->3->67->3->5->13->100->7->72->9->

case=t4
input=6 7
output=
BST is empty

PROGRAM:
-----------------------------------
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

class Node {
    int data;
    Node left, right;

    Node(int item) {
        data = item;
        left = right = null;
    }
}

public class BSTOperations{
    Node root;

    Node insert(Node root, int data) {
        if (root == null) {
            return new Node(data);
        }
        if (data <= root.data) {
            root.left = insert(root.left, data);
        } else if (data > root.data) {
            root.right = insert(root.right, data);
        }
        return root;
    }

    int countNodes(Node root) {
        if (root == null) {
            return 0;
        }
        return 1 + countNodes(root.left) + countNodes(root.right);
    }

    int height(Node root) {
        if (root == null) {
            return 0;
        }
        int leftHeight = height(root.left);
        int rightHeight = height(root.right);
        return Math.max(leftHeight, rightHeight) + 1;
    }

    int minValue(Node node) {
        Node current = node;
        while (current.left != null) {
            current = current.left;
        }
        return current.data;
    }

    int maxValue(Node node) {
        Node current = node;
        while (current.right != null) {
            current = current.right;
        }
        return current.data;
    }

    void display() {
        if (root == null) {
            System.out.println("BST is empty");
            return;
        }
        System.out.println("Level Order traversal of BST is:");
        Queue<Node> queue = new LinkedList<>();
        queue.add(root);
        while (!queue.isEmpty()) {
            Node tempNode = queue.poll();
            System.out.print(tempNode.data + "->");
            if (tempNode.left != null) {
                queue.add(tempNode.left);
            }
            if (tempNode.right != null) {
                queue.add(tempNode.right);
            }
        }
        System.out.println();
    }

    public static void main(String[] args) {
        BSTOperations bst = new BSTOperations();
        Scanner scanner = new Scanner(System.in);
        int ch, n;

        while (true) {
            // System.out.println("Enter your choice (1: Insert, 2: Node Count, 3: Height, 4: Min Value, 5: Max Value, 6: Level Order, 7: Exit): ");
            ch = scanner.nextInt();
            switch (ch) {
                case 1:
                    // System.out.print("Enter value to insert: ");
                    n = scanner.nextInt();
                    bst.root = bst.insert(bst.root, n);
                    break;

                case 2:
                    System.out.println("Number of nodes in BST is: " + bst.countNodes(bst.root));
                    break;

                case 3:
                    System.out.println("Height of BST is: " + bst.height(bst.root));
                    break;

                case 4:
                    if (bst.root == null) {
                        System.out.println("BST is empty. Can not find the value");
                    } else {
                        System.out.println("Minimum Value in BST is: " + bst.minValue(bst.root));
                    }
                    break;

                case 5:
                    if (bst.root == null) {
                        System.out.println("BST is empty. Can not find the value");
                    } else {
                        System.out.println("Maximum Value in BST is: " + bst.maxValue(bst.root));
                    }
                    break;

                case 6:
                    bst.display();
                    break;

                case 7:
                    System.exit(0);

                default:
                    System.out.println("Invalid Choice!!");
            }
        }
    }
}

2. Deletind Mid of Linked List:
----------------------------------------
write a java program delete middile element of linked list. 

TEST CASES:
--------------------
case=t1
input=5
2 1 3 5 7
output=
Original Linked List:
[2, 1, 3, 5, 7]
Linked List after deletion of middle:
[2, 1, 5, 7]

case=t2
input=7
2 1 3 5 6 7 60
output=
Original Linked List:
[2, 1, 3, 5, 6, 7, 60]
Linked List after deletion of middle:
[2, 1, 3, 6, 7, 60]

case=t3
fail message="Hidden case"
input=1
50
output=
Original Linked List:
[50]
Linked List after deletion of middle:
[50]

case=t4
fail message="Hidden case"
input=3
1 2 3 
output=
Original Linked List:
[1, 2, 3]
Linked List after deletion of middle:
[1, 3]

PROGRAM:
-----------------------------
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        LinkedList<Integer> linkedList = new LinkedList<>();

        int numElements = scanner.nextInt();

        for (int i = 0; i < numElements; i++) {
            linkedList.add(scanner.nextInt());
        }

        System.out.println("Original Linked List:");
        System.out.println(linkedList);

        deleteMiddle(linkedList);

        System.out.println("Linked List after deletion of middle:");
        System.out.println(linkedList);

        scanner.close();
    }

    public static void deleteMiddle(LinkedList<Integer> list) {
        if (list == null || list.size() <= 1) {
            return;
        }

        int mid = list.size() / 2;

        ListIterator<Integer> iterator = list.listIterator();

        for (int i = 0; i < mid+1; i++) {
            iterator.next();
        }

        iterator.remove();
    }
}


/*The list.remove(mid) operation has to traverse the list to find the element at the specified index, 
which takes O(n) time complexity. On the other hand, 
using an Iterator to reach the middle element directly takes O(n/2) time complexity, which is more efficient.
*/


//  private static void deleteMiddleElement(LinkedList<Integer> list) {
//         if (list == null || list.size() <= 1) {
        //     return;
        // }


//         int middleIndex = size / 2;

//         // Remove the middle element
//         list.remove(middleIndex);  //here it traverses index based so takes O(n)
//     }

3. Traverse the Given undirected graph using DFS:
---------------------------------------------------------
write a java program to traverse the given undirected graph using DFS (Depth First Search)

Assume that Graph Nodes start with 1 index.

TEST CASE:
--------------------
case = t1
input=5
0 1 1 1 0     
1 0 0 0 1                           
1 0 0 0 1
1 0 0 0 1
0 1 1 1 0
1
output=
1 2 5 3 4

case = t2
input = 3
0 1 1 
0 0 0 
0 1 0
1
output=
1 2 3 

case = t3
input=4
0 1 1 0                                                                         
0 0 1 0                                                                         
1 0 0 1                                                                         
0 0 0 1
1
output=
1 2 3 4

case = t4
input = 4
0 1 1 0
0 0 1 0
1 0 0 1
0 0 0 1
2
output=
2 3 1 4

PROGRAM:
----------------------------
import java.util.Scanner;

public class Solution{
    static int[][] G;       // Adjacency matrix
    static boolean[] visited; // Visited vertices
    static int n;          // Number of vertices

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

    
        n = scanner.nextInt();
        
        G = new int[n + 1][n + 1]; // Adjust to 1-based index
        visited = new boolean[n + 1];

        // Read the adjacency matrix
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= n; j++) {
                G[i][j] = scanner.nextInt();
            }
        }

    
        int s = scanner.nextInt();
        DFS(s); 

        scanner.close();
    }

    static void DFS(int i) {
        System.out.print(i + " "); 
        visited[i] = true; 

    
        for (int j = 1; j <= n; j++) {
            if (!visited[j] && G[i][j] == 1) {
                DFS(j); 
            }
        }
    }
}

4. Traverse the Given undirected graph using BFS:
---------------------------------------------------------
write a java program to traverse the given undirected graph using BFS (Breadth First Search)

Assume that Graph Nodes start with 1 index.

TEST CASE example:
--------------------
case = t1
input=5
0 1 1 1 0     
1 0 0 0 1                           
1 0 0 0 1
1 0 0 0 1
0 1 1 1 0
1
output=
1 2 3 4 5

case = t2
input = 3
0 1 1 
0 0 0 
0 1 0
1
output=
1 2 3 

case = t3
input=4
0 1 1 0                                                                         
0 0 1 0                                                                         
1 0 0 1                                                                         
0 0 0 1
1
output=
1 2 3 4

case = t4
input = 4
0 1 1 0
0 0 1 0
1 0 0 1
0 0 0 1
2
output=
2 3 1 4

PROGRAM:
-------------------------
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Solution {
    static int[][] G;       // Adjacency matrix
    static boolean[] visited; // Visited vertices
    static int n;          // Number of vertices

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);


        n = scanner.nextInt();
        
        G = new int[n + 1][n + 1]; // Adjusting to 1-based index
        visited = new boolean[n + 1];


        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= n; j++) {
                G[i][j] = scanner.nextInt();
            }
        }


        int s = scanner.nextInt();
        BFS(s); 

        scanner.close();
    }

    static void BFS(int start) {
        Queue<Integer> queue = new LinkedList<>();
        visited[start] = true; // Mark the starting vertex as visited
        queue.add(start); // Enqueue the starting vertex

        while (!queue.isEmpty()) {
            int current = queue.poll(); // Dequeue a vertex
            System.out.print(current + " "); // Print the current vertex

            // Traverse all adjacent vertices
            for (int j = 1; j <= n; j++) {
                if (!visited[j] && G[current][j] == 1) {
                    visited[j] = true; // Mark as visited
                    queue.add(j); // Enqueue the vertex
                }
            }
        }
    }
}


5. Find Transitive Closure of a given directed Graph:
----------------------------------------------------------
Write a Java program to find transitive closure of a given directed graph.(floyd warshall algorithm)

The reachability factor is used to create a transitive closure matrix for all (i,j) pairs in a graph. 
If j is reachable from I (i.e., there is a path connecting I and j), we can set the matrix element to 1; 
otherwise, if there is no connection, we can set it to 0.

NOTE: Number of vertices is fixed to 4
------------------
TEST CASES:
--------------------------
case=t1
input=
1 1 0 1
0 1 1 0
0 0 1 1
0 0 0 1
output=
1 1 1 1 
0 1 1 1 
0 0 1 1 
0 0 0 1 

case=t2
input=
1 1 1 0
0 0 1 0
1 0 0 1
0 0 0 1
output=
1 1 1 1
1 1 1 1
1 1 1 1
0 0 0 1

case=t3
input=
1 0 0 0
1 1 1 1
1 0 1 1
0 0 0 1
output=
1 0 0 0
1 1 1 1
1 0 1 1
0 0 0 1

case=t4
input=
1 0 0 0
1 1 0 1
1 0 1 1
0 0 1 0
output=
1 0 0 0
1 1 1 1
1 0 1 1
1 0 1 1

PROGRAM:
---------------------------------
import java.util.Scanner;

public class Solution {
    static final int V = 4; // Number of vertices fixed to 4

    public static void main(String[] args) {
        int[][] graph = new int[V + 1][V + 1]; // Using 1-based index
        Scanner scanner = new Scanner(System.in);

        // Input the adjacency matrix for the directed graph (1-based index)
        for (int i = 1; i <= V; i++) {
            for (int j = 1; j <= V; j++) {
                graph[i][j] = scanner.nextInt();
            }
        }

        // Calculate transitive closure
        transitiveClosure(graph);

 
        for (int i = 1; i <= V; i++) {
            for (int j = 1; j <= V; j++) {
                System.out.print(graph[i][j] + " ");
            }
            System.out.println();
        }

        scanner.close();
    }

    static void transitiveClosure(int[][] graph) {
        
        for (int k = 1; k <= V; k++) {
            for (int i = 1; i <= V; i++) {
                for (int j = 1; j <= V; j++) {
                    graph[i][j] = graph[i][j] | (graph[i][k] & graph[k][j]);
                }
            }
        }
    }
}


// graph[1][4] = graph[1][4] | (graph[1][2] & graph[2][4])
// graph[1][4] = 0 | (1 & 1) => graph[1][4] = 1

6. Detect Cycle in an undirected graph:
-----------------------------------------------
Write a java program to detect if there is cycle in the given undirected graph.

Input Format: User need to enter 'n' number of vertices to be created in the graph.
              Then enter the edges of the graph for each vertex to other vertex.

Output Format:Display cycle present or not in the graph.

Constraints: note vertex number starts from 1. max vertices 5

Test case example:
------------------
case=t1
input=4
0 1 0 0
1 0 1 1
0 1 0 1
0 1 1 0
output=Graph contains a cycle

case=t2
fail message="hidden test case"
input=4
0 1 1 0
1 0 1 0
1 1 0 1
0 0 1 0
output=
Graph contains a cycle

case=t3
input=3
0 1 1
1 0 0
1 0 0
output=
Graph doesn't contain a cycle

case=t4
input=4
0 1 1 0
1 0 1 1
1 1 0 0
0 1 0 0
output=
graph contains a cycle

case=t5
input=4
0 1 1 0
1 0 0 1
1 0 0 1
0 1 1 0
output=
graph contains a cycle

case=t6
input=4
0 1 0 0
1 0 1 1
0 1 0 0
0 1 0 0
output=
graph doesn't contain a cycle

PROGRAM:
---------------------------------
import java.util.Scanner;

public class Main {
    static int[][] graph;  
    static boolean[] visited; 
    static int n;         

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        n = scanner.nextInt();
        graph = new int[n + 1][n + 1];
        visited = new boolean[n + 1];

        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= n; j++) {
                graph[i][j] = scanner.nextInt();
            }
        }

        boolean hasCycle = false;
        for (int i = 1; i <= n; i++) {
            if (!visited[i]) {
                if (isCyclic(i, -1)) {
                    hasCycle = true;
                    break;
                }
            }
        }

        if (hasCycle) {
            System.out.println("Graph contains a cycle");
        } else {
            System.out.println("Graph doesn't contain a cycle");
        }

        scanner.close();
    }

    static boolean isCyclic(int current, int parent) {
        visited[current] = true;

        for (int i = 1; i <= n; i++) {
            if (graph[current][i] == 1) {
                if (!visited[i]) {
                    if (isCyclic(i, current)) {
                        return true;
                    }
                } else if (i != parent) {
                    return true;
                }
            }
        }
        return false;
    }
}

7. Check if the Given Tree is Full Binary Tree or not:
-------------------------------------------------------------
In a full binary tree every node has either 0 or 2 child nodes. except the child nodes.

input format: Enter the 'n' the number of nodes to be created in BST
then enter the node values one by one.
Make the first value as the root node.

TEST CASES:
---------------------
case=t1
input=8
5 1 3 7 4 8 12 90
output=
The BST is not a full binary tree

case=t2
fail message="hidden test case"
input=5
5 3 8 7 15
output=The BST is a full binary tree

Case=t3
Input=8
5 1 3 7 4 8 12 90
Output=The BST is not a full binary tree

Case=t4
Input=5
5 3 8 7 15
Output=The BST is a full binary tree

Case=t5
Input=6
10 5 15 3 7 12
Output=The BST is not a full binary tree

Case=t6
Input=7
20 10 30 5 15 25 35
Output=The BST is a full binary tree

Case=t7
Input=5
50 25 75 10 30
Output=The BST is a full binary tree

PROGRAM:
---------------------------------------
import java.util.Scanner;

class Node {
    int data;
    Node left, right;

    Node(int item) {
        data = item;
        left = right = null;
    }
}

public class Solution {
    static Node root;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        // System.out.print("Enter the number of nodes to be created in BST: ");
        int n = scanner.nextInt();
        
        // System.out.println("Enter the node values one by one:");
        for (int i = 0; i < n; i++) {
            int value = scanner.nextInt();
            root = insert(root, value);
        }
        
        if (isFullBinaryTree(root)) {
            System.out.println("The BST is a full binary tree");
        } else {
            System.out.println("The BST is not a full binary tree");
        }

        scanner.close();
    }

    static Node insert(Node root, int value) {
        if (root == null) {
            return new Node(value);
        }
        if (value < root.data) {
            root.left = insert(root.left, value);
        } else {
            root.right = insert(root.right, value);
        }
        return root;
    }

    static boolean isFullBinaryTree(Node node) {
        if (node == null) {
            return true;
        }
        if (node.left == null && node.right == null) {
            return true; // Leaf node
        }
        if (node.left != null && node.right != null) {
            return isFullBinaryTree(node.left) && isFullBinaryTree(node.right);
        }
        return false; // Node with one child
    }
}

8. Reverse Linked List:
------------------------------
Write a java program to reverse elements of linked list.

TEST CASES:
--------------------
case=t1
input=5
2 1 3 5 7
output=
Original Linked List:
[2, 1, 3, 5, 7]
Linked List after reversal:
[7, 5, 3, 1, 2]


case=t2
input=7
2 1 3 5 6 7 60
output=
Original Linked List:
[2, 1, 3, 5, 6, 7, 60]
Linked List after reversal:
[60, 7, 6, 5, 3, 1, 2]

case=t3
fail message="Hidden case"
input=1
50
output=
Original Linked List:
[50]
Linked List after reversal:
[50]

case=t4
fail message="Hidden case"
input=3
1 2 3 
output=
Original Linked List:
[1, 2, 3]
Linked List after reversal:
[3, 2, 1]

PROGRAM:
--------------------------
import java.util.LinkedList;
import java.util.Scanner;

public class solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        LinkedList<Integer> linkedList = new LinkedList<>();

        int numElements = scanner.nextInt();

        for (int i = 0; i < numElements; i++) {
            linkedList.add(scanner.nextInt());
        }

        System.out.println("Original Linked List:");
        System.out.println(linkedList);

        reverseLinkedList(linkedList);

        System.out.println("Linked List after reversal:");
        System.out.println(linkedList);

        scanner.close();
    }

    public static void reverseLinkedList(LinkedList<Integer> list) {
        int size = list.size();
        for (int i = 0; i < size / 2; i++) {
            int temp = list.get(i);
            list.set(i, list.get(size - i - 1));
            list.set(size - i - 1, temp);
        }
    }
}
