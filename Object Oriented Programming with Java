1. Setters and Getters:
-------------------------------
The class needs three fields (instance variables) with the names firstName, lastName of type String and age of type int. 
Write the following methods (instance methods):

*Method named getFirstName without any parameters, it needs to return the value of the firstName field.
*Method named getLastName without any parameters, it needs to return the value of the lastName field.
*Method named getAge without any parameters, it needs to return the value of the age field.
*Method named setFirstName with one parameter of type String, it needs to set the value of the firstName field.
*Method named setLastName with one parameter of type String, it needs to set the value of the lastName field.
*Method named setAge with one parameter of type int, it needs to set the value of the age field. If the parameter is less than 0 or greater than 100, it needs to set the age field value to 0.
*Method named isTeen without any parameters, it needs to return true if the value of the age field is greater than 12 and less than 20, otherwise, return false.
*Method named getFullName without any parameters, it needs to return the full name of the person.
    *In case both firstName and lastName fields are empty, Strings return an empty String.
    *In case lastName is an empty String, return firstName.
    *In case firstName is an empty String, return lastName.
    
To check if s String is empty, use the method isEmpty from the String class. 
For example, firstName.isEmpty() returns true if the String is empty 

Test case examples:
----------------------
case=t1
input=abhishek
reddy 
56
output=
Full Name: abhishek reddy
Age: 56
Is Teen: false

case=t2
input=Sonam 
khan
15
output=
Full Name: Sonam Khan
Age: 15
Is Teen: true

case=t3
fail message="hidden case"
input=virat 
kohli
33
output=
Full Name: virat kohli
Age: 33
Is Teen: false

case=t4
fail message="hidden case"
input=
kumar
32
output=Full Name: kumar
Age: 32
Is Teen: false

case=t5
grade reduction=10%
fail message="hidden case"
input=
ARUN

32
output=
Full Name: ARUN
Age: 32
Is Teen: false


case=t6
fail message="hidden case"
input=
45
output=
Full Name: Name Data missing
Age: 45
Is Teen: false

case=t7
fail message="hidden case"
input=arun
ck
-56
output=
Full Name: arun ck
Age: 0
Is Teen: false

PROGRAM:
------------------------------
import java.util.Scanner;

public class Solution {
    private String firstName;
    private String lastName;
    private int age; 
    
    public String getFirstName() {
        return this.firstName;
    }
    
    public String getLastName() {
        return this.lastName;
    }

    public int getAge() {
        return this.age;
    }
    
    public void setFirstName(String fName) {
        this.firstName = fName;
    }

    public void setLastName(String lName) {
        this.lastName = lName;
    }

    public void setAge(int age) {
        
        if(age > 100 || age < 0) {
            this.age = 0;
        }
        else { 
            this.age = age;
        }
    }
    
    public boolean isTeen() {
        return this.age > 12 && this.age < 20;
    }

    public String getFullName() {
        if(firstName.isEmpty() && lastName.isEmpty()) {
            return "Name Data Missing";
        }
        if(lastName.isEmpty()) {
            return firstName;
        }
        if(firstName.isEmpty()) {
            return lastName;
        }
        return firstName + " " + lastName;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        String firstName = scanner.nextLine();

        String lastName = scanner.nextLine();

        int age = scanner.nextInt();

        Solution person = new Solution();
        person.setFirstName(firstName);
        person.setLastName(lastName);
        person.setAge(age);

        System.out.println("Full Name: " + person.getFullName());
        System.out.println("Age: " + person.getAge());
        System.out.println("Is Teen: " + person.isTeen());

        scanner.close(); 
}
}


2. Understanding Abstraction, Encapsulation, Constructors, Inheritance:
----------------------------------------------------------------------------
Given the Class Named Author with the following information:
Member variables : name,email and gender
Parameterized Constructor is used to initialize the data members.

The Class Template is given below:
----------------------------------
class Author 
{
    private String name, email;
    private char gender;
    
    Author(String name, String email, char gender) {
        this.name = name;
        this.email = email;
        this.gender = gender;
    }
    
    public String getName() {
        return name;
    }

    public String getEmail() {
        return email;
    }

    public char getGender() {
        return gender;
    }

    @Override
    public String toString() {
        return "[Name: " + name + ", Email: " + email + ", Gender: " + gender + "]";
    }
}
Note: Explore toString() method to display the output:
------------------------------------------------------
using toString() method of the Object class, we can return values of the object without writing the explicit display method.


Using the above Class Author, Create a class Book with the following information.
Member variables : name (String), author (of the class Author), price (double)
Parameterized Constructor: To initialize the variables
Getters and Setters for all the member variables.


Input Format:
-----------------
You need to enter the input in the following order:
Name of the Author
Email Id
Gender
Book Name
Price

Note:
-------------
No need to Write Author class. Its already given in the server.
You only need to implement the Book class. Read data and Access details of Author class and 
Print the Information as Given in test cases.

Test Case Example:
---------------------

case=t1
input=Herbert Schildt
Herb@HerbSchildt.com
Male
Java the complete reference 
899.56
output=
Book Name: Java the complete reference
Author: [Name: Herbert Schildt, Email: Herb@HerbSchildt.com, Gender: M]
Price: 899.56

case=t2
input=Herbert Schildt
Herb@HerbSchildt.com
Male
C++ Programming Cookbook
500.54
output=
Book Name: C++ Programming Cookbook
Author: [Name: Herbert Schildt, Email: Herb@HerbSchildt.com, Gender: M]
Price: 500.54

case=t3
fail message="hidden test case"
input=Herbert Schildt
Herb@HerbSchildt.com
Male
Java The beginners Guide 9th edition
700.45
output=
Book Name: Java The beginners Guide 9th edition
Author: [Name: Herbert Schildt, Email: Herb@HerbSchildt.com, Gender: M]
Price: 700.45

PROGRAM:
-----------------------------
import java.util.*;
class Book extends Author {
    private String bookName;
    private double price;

    Book(String bookName, String authorName, String authorEmail, char authorGender, double price) {
        super(authorName, authorEmail, authorGender);
        this.bookName = bookName;
        this.price = price;
    }

    public String getBookName() {
        return bookName;
    }

    public double getPrice() {
        return price;
    }

    @Override
    public String toString() {
        return "Book Name: " + bookName + "\nAuthor: " + super.toString() + "\nPrice: " + price;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String authorName = scanner.nextLine();
        String authorEmail = scanner.nextLine();
        char authorGender = scanner.next().charAt(0);

        scanner.nextLine();  

        String bookName = scanner.nextLine();

        double price = scanner.nextDouble();

        Book book = new Book(bookName, authorName, authorEmail, authorGender, price);
        System.out.println(book);
        scanner.close();
    }
}

3. Person and Address - Aggregation:
-------------------------------------------
Given the following class Address, Create a Person class with the member name and
Address object. Initialize the Address members and name of person through constructor of Person.
Include Appropriate getter method to access name of person, and print person name including address details.

From the Solution class, read the details and print the result.

Input format: read name of the person, city, state and zipcode from the user.
output as per the test cases given.

//Hint: Create an Object of the Address class and initialize the data members.
        Create an object of the Person class and initialize the name and Link address object to Person class.

class Address {
    private String street;
    private String city;
    private String state;
    private String zipCode;

    public Address(String city, String state, String zipCode) {
        this.city = city;
        this.state = state;
        this.zipCode = zipCode;
    }

    public String getCity() {
        return city;
    }

    public String getState() {
        return state;
    }

    public String getZipCode() {
        return zipCode;
    }
}

Note:  Don't rewrite the Address.java Class, its already given in Server.

Sample TEST CASES:
-----------------
case=t1
fail message="Hidden Case"
input=arun kumar
hyderabad
telangana
500085
output=
Person Details:
Name: arun kumar
Address: hyderabad, telangana - 500085

case=t2
input=rakesh reddy
bangalore
karnataka
560078
output=
Person Details:
Name: rakesh reddy
Address: bangalore, karnataka - 560078

case=t3
input=Akansha 
Andhra pradesh
vijaywada
50235
output=
Person Details:
Name: Akansha
Address: Andhra pradesh, vijaywada- 50235

case=t4
fail message="Hidden Case"
input=chandra bushan
gopal ganj
bihar
841428
output=
Person Details:
Name: chandra bushan
Address: gopal ganj, bihar - 841428

PROGRAM:
---------------------------
import java.util.*;

class Person {
    private String name;
    private Address address;

    public Person(String name, Address address) {
        this.name = name;
        this.address = address;
    }

    public String getName() {
        return name;
    }

    public String getAddressDetails() {
        return "Name: "+name+"\nAddress: "+address.getCity()+ ", "+address.getState()+ " - "+address.getZipCode();
    }
}

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

       // System.out.print("Enter the name of the person: ");
        String name = scanner.nextLine();

       // System.out.print("Enter the city: ");
        String city = scanner.nextLine();

       // System.out.print("Enter the state: ");
        String state = scanner.nextLine();

        //System.out.print("Enter the ZIP code: ");
        String zipCode = scanner.nextLine();

        Address address = new Address(city, state, zipCode);
        Person person = new Person(name, address);

        System.out.println("Person Details:");
        System.out.println(person.getAddressDetails());

        scanner.close(); 
    }
}

4. Person and Mobile- Association:
-------------------------------------------
 Given an existing class Mobile.java. U need to create an association between Mobile.java
and Person.java programs.

Mobile.java is given below:
-----------------------------
class Mobile {
    private String no;

    public void setNo(String no) {
        this.no = no;
    }

    public String getNo() {
        return no;
    }
}

U need to create a list of mobile numbers in Person.java along with person name and implement
appropriate getter and setter methods to add mobilenumbers and display them.

Input format: Read the person name and enter only 2 mobile numbers each on separate line.
output format is as given in the following test cases:

Note: Don't rewrite the Mobile.java Class, its already given in Server.

Test case examples:
----------------------
case=t1
input=Arun kumar
8665565569
7021378904
output=
Arun kumar has following mobile numbers:
8665565569
7021378904

case=t2
input=arvind
6756566775
8903125789
output=
arvind has following mobile numbers:
6756566775
8903125789

case=t3
fail message="hidden case
input=akash
6756566775
8903125789
output=
akash has following mobile numbers:
6756566775
8903125789

PROGRAM:
----------------------------
import java.util.*;
class Persons {
    private String name;
    List<Mobile> numbers = new ArrayList<Mobile>();

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public List<Mobile> getNumbers() {
        return numbers;
    }

    public void addMobileDetails(Mobile m) {
            numbers.add(m);
        }
    
}

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        Persons p = new Persons();

        //System.out.print("Enter the person's name: ");
        String name = scanner.nextLine();
        p.setName(name);

        for (int i = 0; i < 2; i++) {
            //System.out.print("Enter mobile number " + (i + 1) + ": ");
            String mobileNumber = scanner.nextLine();
            Mobile mobile = new Mobile();
            mobile.setNo(mobileNumber);
            p.addMobileDetails(mobile);
        }

        System.out.println(p.getName() + " has following mobile numbers:");
        for (Mobile mobile : p.getNumbers()) {
            System.out.println(mobile.getNo());
        }
    }
}



5. Paint Job- Method Overloading:
-------------------------------------------
Bob is a wall painter and he needs your help. You have to write a program that helps Bob calculate how many buckets of paint he needs to buy
before going to work. Bob might also have some extra buckets at home.
He also knows the area that he can cover with one bucket of paint.

You need to implement the 3 methods based on the information available with the Bob as mentioned below:

1. Write a method named getBucketCount with 4 parameters.
----------------------------------------------------------------
    The first parameter should be named width of type double. This parameter represents the width of the wall.
    The second parameter should be named height of type double. This parameter represents the height of the wall.
    The third parameter should be named areaPerBucket. This parameter represents the area that can be covered with one bucket of paint.
    The fourth parameter should be named extraBuckets. This parameter represents the extra bucket count that Bob has at home.

The method needs to return a value of type int that represents the number of buckets that Bob needs to buy before going to work. 

If one of the parameters width, height or areaPerBucket is less or equal to 0 or if extraBuckets is less than 0, the method needs to return -1
to indicate an invalid value.

If all parameters are valid, the method needs to calculate the number of buckets and return it.

Explaination:
-----------------------
getBucketCount(3.4, 2.1, 1.5, 2) →   wall width 3.4, wall height 2.1, a single bucket can cover an area of 1.5 and 
                                     Bob has 2 extra buckets at home.
                                    
                                    Understand the calculations below:
                                    -----------------------------------
                                     double totalArea = 3.4 * 2.1 = 7.14
                                     double areaWecanPaint = areaPerBucket * extraBuckets =1.5 * 2 = 3
                                     double areatobePainted = totalArea - areaWecanPaint = 7.14 - 3 = 4.14 
                                      
                                     int neededBuckets = areatobePainted / areaPerBucket = 4.14 / 1.5 = 2.76 = 3 (round it off to next digit)  
                                     Hence the method will return 3 as the number of buckets that bob still need to buy to cover totalArea!!
                                     
getBucketCount(-3.4, 2.1, 1.5, 2) →  should return -1 since the width parameter is invalid


2. In second case, Bob does not like to enter 0 for the extraBuckets parameter so he needs another method.
   Write another overloaded method named getBucketCount with 3 parameters namely width, height, and areaPerBucket (all of type double).
   This method needs to return a value of type int that represents the number of buckets that Bob needs to buy before going to work.


getBucketCount(3.4, 2.1, 1.5); → should return 5 since the wall area is 7.14, and a single bucket can cover an area of 1.5.
                                 Understand the calculations Below:
                                 ----------------------------------
                                  double totalArea = width * height = 7.14;
                                  int neededBuckets = totalArea / AreaPerBucket = 7.14 / 1.5 = 4.76 = 5 (rounded off to next digit)
                                 

3. In third case, Bob does not know the width and height of the wall but he knows the area of a wall. He needs you to write another method.
Write another overloaded method named getBucketCount with 2 parameters namely, area and areaPerBucket (both of type double).
The method needs to return a value of type int that represents the number of buckets that Bob needs to buy before going to work.

getBucketCount(7.14, 1.5); →   should return 5 since the wall area is 7.14 and a single bucket can cover an area of 1.5.
                               totalArea / areaPerBucket = 7.14 / 2.2 = 4.76 = 5 (rounded off to next digit)


Note: you can use Menu drive approach with switch case to implement above 3 methods based on user choice.

Test case examples:
----------------------

case=t1
input=1
3.42 2.1 1.5 2
2
3.42 2.1 1.5
3
40.85 5.5
4
output=
Buckets needed: 3
Buckets needed: 5
Buckets needed: 8

case=t2
input=5
3
8.26 4
4
output=
Invalid Choice!
Buckets needed: 3

case=t3
fail message="hidden case"
input=1
4.5 3.5 3 4
2
20 15 3
3
40.5 3
4
output=
Buckets needed: 2
Buckets needed: 100
Buckets needed: 14

case=t4
fail message="hidden case"
grade reduction=10%
input=1
2 3 3 2
2
2 3 3
3
6 2
4
output=Buckets needed: 0
Buckets needed: 2
Buckets needed: 3

case=t5
fail message="hidden case"
input=1
0 0 3 0
2
2 3 1
3
6 0
4
output=
Buckets needed: -1
Buckets needed: 6
Buckets needed: -1

PROGRAM:
-------------------------------
import java.util.*;

public class Solution {

    public static int getBucketCount(double width, double height, double areaPerBucket, int extraBucket) {
        if (width <= 0 || height <= 0 || areaPerBucket <= 0 || extraBucket < 0) {
            return  -1;
        }
        double areaToPaint = width * height;
        double areaWeCanPaint = areaPerBucket * extraBucket;
        double areaLeftToPaint = areaToPaint - areaWeCanPaint;
        if (areaLeftToPaint < 0) {
            return 0;
        } else {
            return ((int)Math.ceil(areaLeftToPaint / areaPerBucket));
        }
    }

    public static int getBucketCount(double width, double height, double areaPerBucket) {
        if (width <= 0 || height <= 0 || areaPerBucket <= 0.0) {
            return  -1;
        }
        double areaToPaint = width * height;
            return ((int)Math.ceil(areaToPaint / areaPerBucket));
    }

    public static int getBucketCount(double area, double areaPerBucket) {
        if (area <= 0 || areaPerBucket <= 0.0) {
            return  -1;
        }
        return ((int)Math.ceil(area / areaPerBucket));
    }


public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        while (true) {
           /* System.out.println("1. Calculate buckets needed with extra buckets");
            System.out.println("2. Calculate buckets needed without extra buckets");
            System.out.println("3. Calculate buckets needed using area");
            System.out.println("4. Exit");*/

            int choice = scanner.nextInt();
            
            switch (choice) {
                case 1:
                    //System.out.println("Enter width, height, area per bucket, and extra buckets:");
                    double width = scanner.nextDouble();
                    double height = scanner.nextDouble();
                    double areaPerBucket = scanner.nextDouble();
                    int extraBuckets = scanner.nextInt();
                    int bucketsNeeded = getBucketCount(width, height, areaPerBucket, extraBuckets);
                    System.out.println("Buckets needed: " + bucketsNeeded);
                    break;

                case 2:
                    //System.out.println("Enter width, height, and area per bucket:");
                    double width2 = scanner.nextDouble();
                    double height2 = scanner.nextDouble();
                    double areaPerBucket2 = scanner.nextDouble();
                    int bucketsNeeded2 = getBucketCount(width2, height2, areaPerBucket2);
                    System.out.println("Buckets needed: " + bucketsNeeded2);
                    break;

                case 3:
                    //System.out.println("Enter area and area per bucket:");
                    double area = scanner.nextDouble();
                    double areaPerBucket3 = scanner.nextDouble();
                    int bucketsNeeded3 = getBucketCount(area, areaPerBucket3);
                    System.out.println("Buckets needed: " + bucketsNeeded3);
                    break;

                case 4:
                    scanner.close();
                    System.exit(0);

                default:
                    System.out.println("Invalid choice!");
            }
        }
    }
}

